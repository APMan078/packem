// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Packem.Data;

#nullable disable

namespace Packem.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220801171321_CreateDefaultValues_For_UnitOfMeasure")]
    partial class CreateDefaultValues_For_UnitOfMeasure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Packem.Domain.Entities.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActivityLogId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.AdjustBinQuantity", b =>
                {
                    b.Property<int>("AdjustBinQuantityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdjustBinQuantityId"));

                    b.Property<DateTime>("AdjustDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("NewQty")
                        .HasColumnType("integer");

                    b.Property<int>("OldQty")
                        .HasColumnType("integer");

                    b.HasKey("AdjustBinQuantityId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.ToTable("AdjustBinQuantities", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Bin", b =>
                {
                    b.Property<int>("BinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BinId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ZoneId");

                    b.ToTable("Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PointOfContact")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("StateProvince")
                        .HasColumnType("text");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("Deleted");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerDevice", b =>
                {
                    b.Property<int>("CustomerDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerDeviceId"));

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeactivedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CustomerDeviceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.ToTable("CustomerDevices", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerDeviceToken", b =>
                {
                    b.Property<int>("CustomerDeviceTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerDeviceTokenId"));

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerDeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeactivedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ValidatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CustomerDeviceTokenId");

                    b.HasIndex("CustomerDeviceId");

                    b.HasIndex("Deleted");

                    b.ToTable("CustomerDeviceTokens", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerFacility", b =>
                {
                    b.Property<int>("CustomerFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerFacilityId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("StateProvince")
                        .HasColumnType("text");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("text");

                    b.HasKey("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.ToTable("CustomerFacilities", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerLocationId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CustomerLocationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.ToTable("CustomerLocations", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErrorLogId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ErrorLogId");

                    b.HasIndex("Deleted");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("QtyOnHand")
                        .HasColumnType("integer");

                    b.HasKey("InventoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.InventoryBin", b =>
                {
                    b.Property<int>("InventoryBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryBinId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.HasKey("InventoryBinId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("InventoryId");

                    b.ToTable("Inventories_Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.InventoryZone", b =>
                {
                    b.Property<int>("InventoryZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryZoneId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("InventoryZoneId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Inventories_Zones", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("UOM")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("ItemId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.ItemVendor", b =>
                {
                    b.Property<int>("ItemVendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemVendorId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("ItemVendorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId");

                    b.ToTable("Items_Vendors", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderLineId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PerUnitPrice")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int>("Received")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<int?>("SaleOrderId")
                        .HasColumnType("integer");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("OrderLines", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.OrderLineBin", b =>
                {
                    b.Property<int>("OrderLineBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderLineBinId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("OrderLineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PickDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.HasKey("OrderLineBinId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("OrderLineId");

                    b.ToTable("OrderLines_Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<int?>("CustomerFacilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderQty")
                        .HasColumnType("integer");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<string>("ShipVia")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatusUpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.PutAway", b =>
                {
                    b.Property<int>("PutAwayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PutAwayId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PutAwayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PutAwayType")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiveId")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.HasKey("PutAwayId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ReceiveId");

                    b.ToTable("PutAways", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.PutAwayBin", b =>
                {
                    b.Property<int>("PutAwayBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PutAwayBinId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PutAwayId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PutAwayBinId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("PutAwayId");

                    b.ToTable("PutAways_Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Recall", b =>
                {
                    b.Property<int>("RecallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecallId"));

                    b.Property<int?>("CustomerFacilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecallDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("RecallId");

                    b.HasIndex("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.ToTable("Recalls", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.RecallBin", b =>
                {
                    b.Property<int>("RecallBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecallBinId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PickDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int?>("RecallId")
                        .HasColumnType("integer");

                    b.HasKey("RecallBinId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("RecallId");

                    b.ToTable("Recalls_Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceiptId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.ToTable("Receipts", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receive", b =>
                {
                    b.Property<int>("ReceiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceiveId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int>("Received")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ReceiveId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Receives", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.HasIndex("Deleted");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.SaleOrder", b =>
                {
                    b.Property<int>("SaleOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SaleOrderId"));

                    b.Property<int?>("CustomerFacilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerNo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderQty")
                        .HasColumnType("integer");

                    b.Property<int>("PickingStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PromiseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<string>("SaleOrderNo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ShipToAddress1")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("ShipToAddress2")
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("ShipToCity")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ShipToPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShipToStateProvince")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ShipToZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("SaleOrderId");

                    b.HasIndex("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.ToTable("SaleOrders", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransferId"));

                    b.Property<DateTime?>("CompletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TransferCurrentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TransferNewId")
                        .HasColumnType("integer");

                    b.HasKey("TransferId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("ItemId");

                    b.HasIndex("TransferCurrentId");

                    b.HasIndex("TransferNewId");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferCurrent", b =>
                {
                    b.Property<int>("TransferCurrentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransferCurrentId"));

                    b.Property<int?>("CurrentBinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentZoneId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.HasKey("TransferCurrentId");

                    b.HasIndex("CurrentBinId");

                    b.HasIndex("CurrentZoneId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.ToTable("TransferCurrents", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferNew", b =>
                {
                    b.Property<int>("TransferNewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransferNewId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NewBinId")
                        .HasColumnType("integer");

                    b.Property<int?>("NewZoneId")
                        .HasColumnType("integer");

                    b.HasKey("TransferNewId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("NewBinId");

                    b.HasIndex("NewZoneId");

                    b.ToTable("TransferNews", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferZoneBin", b =>
                {
                    b.Property<int>("TransferZoneBinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransferZoneBinId"));

                    b.Property<int?>("BinId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TransferId")
                        .HasColumnType("integer");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("TransferZoneBinId");

                    b.HasIndex("BinId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("TransferId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Transfers_Zones_Bins", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<int>("UnitOfMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitOfMeasureId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureId");

                    b.HasIndex("Deleted");

                    b.ToTable("UnitOfMeasures", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.UnitOfMeasureCustomer", b =>
                {
                    b.Property<int>("UnitOfMeasureCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitOfMeasureCustomerId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("integer");

                    b.HasKey("UnitOfMeasureCustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("UnitOfMeasures_Customers", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("Address2")
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PointOfContact")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("VendorNo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("VendorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.ToTable("Vendors", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ZoneId"));

                    b.Property<int?>("CustomerFacilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("ZoneId");

                    b.HasIndex("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("Deleted");

                    b.ToTable("Zones", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.ActivityLog", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_ActivityLogs_Bins");

                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ActivityLogs_Customers");

                    b.HasOne("Packem.Domain.Entities.Inventory", "Inventory")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_ActivityLogs_Inventories");

                    b.HasOne("Packem.Domain.Entities.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ActivityLogs_Users");

                    b.HasOne("Packem.Domain.Entities.Zone", "Zone")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_ActivityLogs_Zones");

                    b.Navigation("Bin");

                    b.Navigation("Customer");

                    b.Navigation("Inventory");

                    b.Navigation("User");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Packem.Domain.Entities.AdjustBinQuantity", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("AdjustBinQuantities")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_AdjustBinQuantities_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("AdjustBinQuantities")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_AdjustBinQuantities_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("AdjustBinQuantities")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_AdjustBinQuantities_Items");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Bin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Bins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Bins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Zone", "Zone")
                        .WithMany("Bins")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_Bins_Zones");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerDevice", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerDevices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerDevices_Customers");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("CustomerDevices")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_CustomerDevices_CustomerLocations");

                    b.Navigation("Customer");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerDeviceToken", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerDevice", "CustomerDevice")
                        .WithMany("CustomerDeviceTokens")
                        .HasForeignKey("CustomerDeviceId")
                        .HasConstraintName("FK_CustomerDeviceTokens_CustomerDevices");

                    b.Navigation("CustomerDevice");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerFacility", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("CustomerFacilities")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_CustomerFacilities_CustomerLocations");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerLocations_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Packem.Domain.Entities.ErrorLog", b =>
                {
                    b.HasOne("Packem.Domain.Entities.User", "User")
                        .WithMany("ErrorLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ErrorLogs_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("Inventories")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Inventories_Customers");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithOne("Inventory")
                        .HasForeignKey("Packem.Domain.Entities.Inventory", "ItemId")
                        .HasConstraintName("FK_Inventories_Items");

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Packem.Domain.Entities.InventoryBin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("InventoryBins")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_InventoriesBins_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("InventoryBins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_InventoriesBins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryBins")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_InventoriesBins_Inventories");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Packem.Domain.Entities.InventoryZone", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("InventoryZones")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_InventoryZones_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryZones")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_InventoryZones_Inventories");

                    b.HasOne("Packem.Domain.Entities.Zone", "Zone")
                        .WithMany("InventoryZones")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_InventoryZones_Areas");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Inventory");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Item", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("Items")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Items_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Packem.Domain.Entities.ItemVendor", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("ItemVendors")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ItemsVendors_Customers");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("ItemVendors")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemsVendors_Items");

                    b.HasOne("Packem.Domain.Entities.Vendor", "Vendor")
                        .WithMany("ItemVendors")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_ItemsVendors_Vendors");

                    b.Navigation("Customer");

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Packem.Domain.Entities.OrderLine", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("OrderLines")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_OrderLines_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("OrderLines")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OrderLines_Items");

                    b.HasOne("Packem.Domain.Entities.SaleOrder", "SaleOrder")
                        .WithMany("OrderLines")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("FK_OrderLines_SaleOrders");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Packem.Domain.Entities.OrderLineBin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("OrderLineBins")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_OrderLinesBins_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("OrderLineBins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_OrderLinesBins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.OrderLine", "OrderLine")
                        .WithMany("OrderLineBins")
                        .HasForeignKey("OrderLineId")
                        .HasConstraintName("FK_OrderLinesBins_OrderLines");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("OrderLine");
                });

            modelBuilder.Entity("Packem.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerFacility", "CustomerFacility")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CustomerFacilityId")
                        .HasConstraintName("FK_PurchaseOrders_CustomerFacilities");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_PurchaseOrders_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_PurchaseOrders_Vendors");

                    b.Navigation("CustomerFacility");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Packem.Domain.Entities.PutAway", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("PutAways")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_PutAways_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Receipt", "Receipt")
                        .WithMany("PutAways")
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("FK_PutAways_Receipts");

                    b.HasOne("Packem.Domain.Entities.Receive", "Receive")
                        .WithMany("PutAways")
                        .HasForeignKey("ReceiveId")
                        .HasConstraintName("FK_PutAways_Receives");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Receipt");

                    b.Navigation("Receive");
                });

            modelBuilder.Entity("Packem.Domain.Entities.PutAwayBin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("PutAwayBins")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_PutAwaysBins_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("PutAwayBins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_PutAwaysBins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.PutAway", "PutAway")
                        .WithMany("PutAwayBins")
                        .HasForeignKey("PutAwayId")
                        .HasConstraintName("FK_PutAwaysBins_PutAways");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("PutAway");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Recall", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerFacility", "CustomerFacility")
                        .WithMany("Recalls")
                        .HasForeignKey("CustomerFacilityId")
                        .HasConstraintName("FK_Recalls_CustomerFacilities");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Recalls")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Recalls_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("Recalls")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Recalls_Items");

                    b.Navigation("CustomerFacility");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Packem.Domain.Entities.RecallBin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("RecallBins")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_RecallsBins_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("RecallBins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_RecallsBins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Recall", "Recall")
                        .WithMany("RecallBins")
                        .HasForeignKey("RecallId")
                        .HasConstraintName("FK_RecallsBins_Recalls");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Recall");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receipt", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Receipts_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("Receipts")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Receipts_Items");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receive", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Receives")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Receives_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("Receives")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Receives_Items");

                    b.HasOne("Packem.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Receives")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_Receives_PurchaseOrders");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Packem.Domain.Entities.SaleOrder", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerFacility", "CustomerFacility")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerFacilityId")
                        .HasConstraintName("FK_SaleOrders_CustomerFacilities");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_SaleOrders_CustomerLocations");

                    b.Navigation("CustomerFacility");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Transfer", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Transfers")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Transfers_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Item", "Item")
                        .WithMany("Transfers")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Transfers_Items");

                    b.HasOne("Packem.Domain.Entities.TransferCurrent", "TransferCurrent")
                        .WithMany("Transfers")
                        .HasForeignKey("TransferCurrentId")
                        .HasConstraintName("FK_Transfers_TransferCurrents");

                    b.HasOne("Packem.Domain.Entities.TransferNew", "TransferNew")
                        .WithMany("Transfers")
                        .HasForeignKey("TransferNewId")
                        .HasConstraintName("FK_Transfers_TransferNews");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Item");

                    b.Navigation("TransferCurrent");

                    b.Navigation("TransferNew");
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferCurrent", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "CurrentBin")
                        .WithMany("TransferCurrents")
                        .HasForeignKey("CurrentBinId")
                        .HasConstraintName("FK_TransferCurrents_CurrentBins");

                    b.HasOne("Packem.Domain.Entities.Zone", "CurrentZone")
                        .WithMany("TransferCurrents")
                        .HasForeignKey("CurrentZoneId")
                        .HasConstraintName("FK_TransferCurrents_CurrentZones");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("TransferCurrents")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_TransferCurrents_CustomerLocations");

                    b.Navigation("CurrentBin");

                    b.Navigation("CurrentZone");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferNew", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("TransferNews")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_TransferNews_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Bin", "NewBin")
                        .WithMany("TransferNews")
                        .HasForeignKey("NewBinId")
                        .HasConstraintName("FK_TransferNews_NewBins");

                    b.HasOne("Packem.Domain.Entities.Zone", "NewZone")
                        .WithMany("TransferNews")
                        .HasForeignKey("NewZoneId")
                        .HasConstraintName("FK_TransferNews_NewZones");

                    b.Navigation("CustomerLocation");

                    b.Navigation("NewBin");

                    b.Navigation("NewZone");
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferZoneBin", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Bin", "Bin")
                        .WithMany("TransferZoneBins")
                        .HasForeignKey("BinId")
                        .HasConstraintName("FK_TransferZoneBins_Bins");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("TransferZoneBins")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_TransferZoneBins_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Transfer", "Transfer")
                        .WithMany("TransferZoneBins")
                        .HasForeignKey("TransferId")
                        .HasConstraintName("FK_TransferZoneBins_Transfers");

                    b.HasOne("Packem.Domain.Entities.Zone", "Zone")
                        .WithMany("TransferZoneBins")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_TransferZoneBins_Zones");

                    b.Navigation("Bin");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Transfer");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Packem.Domain.Entities.UnitOfMeasureCustomer", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("UnitOfMeasureCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_UnitOfMeasureCustomers_Customers");

                    b.HasOne("Packem.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureCustomers")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_UnitOfMeasureCustomers_UnitOfMeasures");

                    b.Navigation("Customer");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Users_Customers");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Users")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Users_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Customer");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("Vendors")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Vendors_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Zone", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerFacility", "CustomerFacility")
                        .WithMany("Zones")
                        .HasForeignKey("CustomerFacilityId")
                        .HasConstraintName("FK_Zones_CustomerFacilities");

                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Zones")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Zones_CustomerLocations");

                    b.Navigation("CustomerFacility");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Bin", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("AdjustBinQuantities");

                    b.Navigation("InventoryBins");

                    b.Navigation("OrderLineBins");

                    b.Navigation("PutAwayBins");

                    b.Navigation("RecallBins");

                    b.Navigation("TransferCurrents");

                    b.Navigation("TransferNews");

                    b.Navigation("TransferZoneBins");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Customer", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("CustomerDevices");

                    b.Navigation("CustomerLocations");

                    b.Navigation("Inventories");

                    b.Navigation("ItemVendors");

                    b.Navigation("Items");

                    b.Navigation("UnitOfMeasureCustomers");

                    b.Navigation("Users");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerDevice", b =>
                {
                    b.Navigation("CustomerDeviceTokens");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerFacility", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("Recalls");

                    b.Navigation("SaleOrders");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.Navigation("AdjustBinQuantities");

                    b.Navigation("Bins");

                    b.Navigation("CustomerDevices");

                    b.Navigation("CustomerFacilities");

                    b.Navigation("InventoryBins");

                    b.Navigation("InventoryZones");

                    b.Navigation("OrderLineBins");

                    b.Navigation("OrderLines");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PutAwayBins");

                    b.Navigation("PutAways");

                    b.Navigation("RecallBins");

                    b.Navigation("Recalls");

                    b.Navigation("Receipts");

                    b.Navigation("Receives");

                    b.Navigation("SaleOrders");

                    b.Navigation("TransferCurrents");

                    b.Navigation("TransferNews");

                    b.Navigation("TransferZoneBins");

                    b.Navigation("Transfers");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("InventoryBins");

                    b.Navigation("InventoryZones");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Item", b =>
                {
                    b.Navigation("AdjustBinQuantities");

                    b.Navigation("Inventory");

                    b.Navigation("ItemVendors");

                    b.Navigation("OrderLines");

                    b.Navigation("Recalls");

                    b.Navigation("Receipts");

                    b.Navigation("Receives");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Packem.Domain.Entities.OrderLine", b =>
                {
                    b.Navigation("OrderLineBins");
                });

            modelBuilder.Entity("Packem.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("Receives");
                });

            modelBuilder.Entity("Packem.Domain.Entities.PutAway", b =>
                {
                    b.Navigation("PutAwayBins");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Recall", b =>
                {
                    b.Navigation("RecallBins");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receipt", b =>
                {
                    b.Navigation("PutAways");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Receive", b =>
                {
                    b.Navigation("PutAways");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Packem.Domain.Entities.SaleOrder", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Transfer", b =>
                {
                    b.Navigation("TransferZoneBins");
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferCurrent", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Packem.Domain.Entities.TransferNew", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("Packem.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("UnitOfMeasureCustomers");
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("ErrorLogs");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("ItemVendors");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Zone", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Bins");

                    b.Navigation("InventoryZones");

                    b.Navigation("TransferCurrents");

                    b.Navigation("TransferNews");

                    b.Navigation("TransferZoneBins");
                });
#pragma warning restore 612, 618
        }
    }
}
