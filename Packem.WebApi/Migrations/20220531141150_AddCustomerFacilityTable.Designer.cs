// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Packem.Data;

#nullable disable

namespace Packem.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220531141150_AddCustomerFacilityTable")]
    partial class AddCustomerFacilityTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Packem.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerFacility", b =>
                {
                    b.Property<int>("CustomerFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerFacilityId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CustomerFacilityId");

                    b.HasIndex("CustomerLocationId");

                    b.ToTable("CustomerFacilities", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.Property<int>("CustomerLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerLocationId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("CustomerLocationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerLocations", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErrorLogId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ErrorLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CustomerLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("CustomerLocationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerFacility", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("CustomerFacilities")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_CustomerFacilities_CustomerLocations");

                    b.Navigation("CustomerLocation");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.HasOne("Packem.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerLocations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerLocations_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Packem.Domain.Entities.ErrorLog", b =>
                {
                    b.HasOne("Packem.Domain.Entities.User", "User")
                        .WithMany("ErrorLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ErrorLogs_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.HasOne("Packem.Domain.Entities.CustomerLocation", "CustomerLocation")
                        .WithMany("Users")
                        .HasForeignKey("CustomerLocationId")
                        .HasConstraintName("FK_Users_CustomerLocations");

                    b.HasOne("Packem.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("CustomerLocation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerLocations");
                });

            modelBuilder.Entity("Packem.Domain.Entities.CustomerLocation", b =>
                {
                    b.Navigation("CustomerFacilities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Packem.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Packem.Domain.Entities.User", b =>
                {
                    b.Navigation("ErrorLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
